#include<stdio.h>
#include<stdlib.h>
void createnode();
void insertbeg();
void insertend();
void insertmiddle();
void display();
void reverse_list();
struct node
{
  int data;
  struct node *next;
}*head=NULL,*tail=NULL, *temp=NULL,*p=NULL;
int main()
{
int n;
while(1){
printf("\n1.insertatbeg\n2.insertatend\n3.insertatmiddle\n4.display\n5.deletebeg\n6.deleteend\n7.deletemiddle\n8.reverse a list\n9.exit\n");
scanf("%d",&n);
switch(n){
case 1:insertbeg();
display();
break;
case 2:insertend();
display();
       break;
case 3:insertmiddle();
display();
       break;
case 4:display();
       break;
case 5:deletebeg();
display();
break;
case 6:deleteend();
display();
break;
case 7:deletemiddle();
display();
break;
case 8:reverse_list();
display();
break;
case 9:exit(1);
}
 }
 }
void createnode()
{
int value;
printf("Enter data");
scanf("%d",&value);
temp=(struct node*)malloc(sizeof(struct node));
temp->data=value;
temp->next=NULL;
}
void insertbeg()
{createnode();
if(head==NULL)
{
head=tail=temp;
temp=NULL;
}
else{
temp->next=head;
head=temp;
temp=NULL;
}
}
void insertend()
{
createnode();
if(head==NULL){
head=tail=temp;
temp=NULL;
}
else{
tail->next=temp;
tail=temp;
temp=NULL;
}
}
void display()
{
if(head==NULL){
printf("List is empty");
}
else{
temp=head;
while(temp!=NULL){
printf("%d\t",temp->data);
temp=temp->next;
}
temp=NULL;
}
}
void insertmiddle(){
int pos,i;
printf("\nenter the position to insert value:");
scanf("%d",&pos);
createnode();
p=head;
for(i=2;i<pos;i++){       //we have traverse upto (n-1)th element
        p=p->next;
        if(p==NULL)
        break;
    }
if(p!=NULL){
temp->next=p->next;
p->next=temp;
temp=NULL;
p=NULL;
}
else{
printf("\ncant insert at the given position");
}
}
void deletebeg(){
if(head==NULL)
printf("list is empty");
else{
temp=head;
head=head->next;
free(temp);
temp=NULL;
}
}
void deleteend(){//USE TWO TEMPORARY VARIABLES
if(head==NULL)
printf("list is empty");
else{
p=head;
temp=head;
while(temp->next!=NULL){
    p=temp;
    temp=temp->next;
}
tail=p;
tail->next=NULL;
free(temp);
temp=NULL;
p=NULL;
}
}
void deletemiddle(){
    if(head==NULL)
        printf("\ncant delete");
else{
    int pos,i;
printf("\nenter the position to delete:");
scanf("%d",&pos);
p=head;
temp=head;
for(i=1;i<pos;i++){
    p=temp;
    temp=temp->next;
    if(temp==NULL)
    break;
}
if(temp!=NULL){
p->next=temp->next;
free(temp);
temp=NULL;
p=NULL;
}
else{
    printf("\nthe position is not there");
}
}
}
void deleteList()
{
    struct node *temp;

    while(head != NULL)
    {
        temp = head;
        head = head->next;

        free(temp);
    }

    printf("SUCCESSFULLY DELETED ALL NODES OF LINKED LIST\n");
}
void reverse_list(){
    struct node *prev=NULL,*next=NULL,*curr=head;
    while(curr!=NULL){
    next=curr->next;
    curr->next=prev;
    prev=curr;
    curr=next;
    }
    head=prev;
}
